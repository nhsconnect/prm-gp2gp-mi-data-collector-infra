#!/bin/bash

set -Eeo pipefail

stack_name=mesh-client
tf_dir=terraform

state_bucket="prm-gp2gp-terraform-state"
state_lock_table="prm-gp2gp-terraform-table"
state_region="eu-west-2"

function tf_init {
    directory=$1
    stack_env=$2
    terraform init \
        -backend-config key=${stack_env}/${stack_name}/terraform.tfstate \
        -backend-config bucket=${state_bucket} \
        -backend-config dynamodb_table=${state_lock_table} \
        -backend-config region=${state_region} \
        ${directory}
}

function build_lambda {
    lambda_name=$1

    build_dir=lambda/build/$lambda_name
    rm -rf $build_dir
    mkdir -p $build_dir

    requirements_file=lambda/$lambda_name/requirements.txt
    if test -f "$requirements_file"; then
        pip install -r $requirements_file -t $build_dir
    fi

    cp lambda/$lambda_name/*.py $build_dir

    pushd $build_dir
    zip -r -X ../$lambda_name.zip .
    popd
}

function build_lambdas {
    build_lambda datacanary
    build_lambda smoketest
    build_lambda alert
}

if [ "$#" -lt 1 ]; then
    echo "Usage: $0 TASK [STACK-ENVIRONMENT]"
    exit 1
fi

task="$1"

echo "--- ${task} ---"
case "${task}" in
    validate)
        stack_env="$2"
        tf_init ${tf_dir} ${stack_env}
        terraform validate ${tf_dir}
    ;;
    dojo-validate)
        stack_env="$2"
        dojo "./tasks validate ${stack_env}"
    ;;
    plan)
        stack_env="$2"
        build_lambdas
        tf_init ${tf_dir} ${stack_env} 
        terraform plan \
          -var environment=${stack_env} \
          -var-file=${stack_env}.tfvars \
          -out=${stack_env}.tfplan \
          ${tf_dir}
    ;;
    dojo-plan)
        stack_env="$2"
        dojo "./tasks plan ${stack_env}"
    ;;
    apply)
        stack_env="$2"
        tf_init ${tf_dir} ${stack_env}
        terraform apply ${stack_env}.tfplan
    ;;
    dojo-apply)
        stack_env="$2"
        dojo "./tasks apply ${stack_env}"
    ;;
    format)
        terraform fmt terraform
    ;;
    build-lambdas)
        build_lambdas
    ;;
    *)
        echo "Invalid task: '${task}'"
        exit 1
    ;;
esac

set +e
